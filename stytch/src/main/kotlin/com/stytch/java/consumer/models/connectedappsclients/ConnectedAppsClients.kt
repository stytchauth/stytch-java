package com.stytch.java.consumer.models.connectedappsclients

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass
import com.stytch.java.consumer.models.connectedapps.ConnectedApp
import com.stytch.java.consumer.models.connectedapps.ConnectedAppWithClientSecret
import com.stytch.java.consumer.models.connectedapps.ResultsMetadata

@JsonClass(generateAdapter = false)
public enum class CreateRequestClientType {
    @Json(name = "first_party")
    FIRST_PARTY,

    @Json(name = "first_party_public")
    FIRST_PARTY_PUBLIC,

    @Json(name = "third_party")
    THIRD_PARTY,

    @Json(name = "third_party_public")
    THIRD_PARTY_PUBLIC,
}

/**
* Request type for `Clients.create`.
*/
@JsonClass(generateAdapter = true)
public data class CreateRequest
    @JvmOverloads
    constructor(
        /**
         * The type of Connected App. Supported values are `first_party`, `first_party_public`, `third_party`, and
         * `third_party_public`.
         */
        @Json(name = "client_type")
        val clientType: CreateRequestClientType,
        /**
         * A human-readable name for the client.
         */
        @Json(name = "client_name")
        val clientName: String? = null,
        /**
         * A human-readable description for the client.
         */
        @Json(name = "client_description")
        val clientDescription: String? = null,
        /**
         * Array of redirect URI values for use in OAuth Authorization flows.
         */
        @Json(name = "redirect_urls")
        val redirectURLS: List<String>? = emptyList(),
        /**
         * Valid for first party clients only. If `true`, an authorization token granted to this Client can be exchanged for a
         * full Stytch session.
         */
        @Json(name = "full_access_allowed")
        val fullAccessAllowed: Boolean? = null,
        /**
         * The number of minutes before the access token expires. The default is 60 minutes.
         */
        @Json(name = "access_token_expiry_minutes")
        val accessTokenExpiryMinutes: Int? = null,
        /**
         * The custom audience for the access token.
         */
        @Json(name = "access_token_custom_audience")
        val accessTokenCustomAudience: String? = null,
        /**
         * The content of the access token custom claims template. The template must be a valid JSON object.
         */
        @Json(name = "access_token_template_content")
        val accessTokenTemplateContent: String? = null,
        /**
         * Array of redirect URI values for use in OIDC Logout flows.
         */
        @Json(name = "post_logout_redirect_urls")
        val postLogoutRedirectURLS: List<String>? = emptyList(),
        /**
         * The logo URL of the Connected App, if any.
         */
        @Json(name = "logo_url")
        val logoURL: String? = null,
        /**
         * Valid for first party clients only. If true, the client does not need to request explicit user consent for the
         * `offline_access` scope.
         */
        @Json(name = "bypass_consent_for_offline_access")
        val bypassConsentForOfflineAccess: Boolean? = null,
    )

/**
* Response type for `Clients.create`.
*/
@JsonClass(generateAdapter = true)
public data class CreateResponse
    @JvmOverloads
    constructor(
        /**
         * Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we
         * may ask for this value to help identify a specific API call when helping you debug an issue.
         */
        @Json(name = "request_id")
        val requestId: String,
        /**
         * The Connected App created by this API call.
         */
        @Json(name = "connected_app")
        val connectedApp: ConnectedAppWithClientSecret,
        /**
         * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values
         * equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
         */
        @Json(name = "status_code")
        val statusCode: Int,
    )

/**
* Request type for `Clients.delete`.
*/
@JsonClass(generateAdapter = true)
public data class DeleteRequest
    @JvmOverloads
    constructor(
        /**
         * The ID of the client.
         */
        @Json(name = "client_id")
        val clientId: String,
    )

/**
* Response type for `Clients.delete`.
*/
@JsonClass(generateAdapter = true)
public data class DeleteResponse
    @JvmOverloads
    constructor(
        @Json(name = "request_id")
        val requestId: String,
        /**
         * The ID of the client.
         */
        @Json(name = "client_id")
        val clientId: String,
        @Json(name = "status_code")
        val statusCode: Int,
    )

/**
* Request type for `Clients.get`.
*/
@JsonClass(generateAdapter = true)
public data class GetRequest
    @JvmOverloads
    constructor(
        /**
         * The ID of the Connected App client.
         */
        @Json(name = "client_id")
        val clientId: String,
    )

/**
* Response type for `Clients.get`.
*/
@JsonClass(generateAdapter = true)
public data class GetResponse
    @JvmOverloads
    constructor(
        /**
         * Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we
         * may ask for this value to help identify a specific API call when helping you debug an issue.
         */
        @Json(name = "request_id")
        val requestId: String,
        /**
         * The Connected App affected by this operation.
         */
        @Json(name = "connected_app")
        val connectedApp: ConnectedApp,
        /**
         * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values
         * equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
         */
        @Json(name = "status_code")
        val statusCode: Int,
    )

/**
* Request type for `Clients.search`.
*/
@JsonClass(generateAdapter = true)
public data class SearchRequest
    @JvmOverloads
    constructor(
        /**
         * The `cursor` field allows you to paginate through your results. Each result array is limited to 1000 results. If your
         * query returns more than 1000 results, you will need to paginate the responses using the `cursor`. If you receive a
         * response that includes a non-null `next_cursor` in the `results_metadata` object, repeat the search call with the
         * `next_cursor` value set to the `cursor` field to retrieve the next page of results. Continue to make search calls until
         * the `next_cursor` in the response is null.
         */
        @Json(name = "cursor")
        val cursor: String? = null,
        /**
         * The number of search results to return per page. The default limit is 100. A maximum of 1000 results can be returned by
         * a single search request. If the total size of your result set is greater than one page size, you must paginate the
         * response. See the `cursor` field.
         */
        @Json(name = "limit")
        val limit: Long? = null,
    )

/**
* Response type for `Clients.search`.
*/
@JsonClass(generateAdapter = true)
public data class SearchResponse
    @JvmOverloads
    constructor(
        /**
         * Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we
         * may ask for this value to help identify a specific API call when helping you debug an issue.
         */
        @Json(name = "request_id")
        val requestId: String,
        @Json(name = "connected_apps")
        val connectedApps: List<ConnectedApp>,
        /**
         * The search `results_metadata` object contains metadata relevant to your specific query like total and `next_cursor`.
         */
        @Json(name = "results_metadata")
        val resultsMetadata: ResultsMetadata,
        /**
         * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values
         * equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
         */
        @Json(name = "status_code")
        val statusCode: Int,
    )

/**
* Request type for `Clients.update`.
*/
@JsonClass(generateAdapter = true)
public data class UpdateRequest
    @JvmOverloads
    constructor(
        /**
         * The ID of the client.
         */
        @Json(name = "client_id")
        val clientId: String,
        /**
         * A human-readable name for the client.
         */
        @Json(name = "client_name")
        val clientName: String? = null,
        /**
         * A human-readable description for the client.
         */
        @Json(name = "client_description")
        val clientDescription: String? = null,
        /**
         * Array of redirect URI values for use in OAuth Authorization flows.
         */
        @Json(name = "redirect_urls")
        val redirectURLS: List<String>? = emptyList(),
        /**
         * Valid for first party clients only. If `true`, an authorization token granted to this Client can be exchanged for a
         * full Stytch session.
         */
        @Json(name = "full_access_allowed")
        val fullAccessAllowed: Boolean? = null,
        /**
         * The number of minutes before the access token expires. The default is 60 minutes.
         */
        @Json(name = "access_token_expiry_minutes")
        val accessTokenExpiryMinutes: Int? = null,
        /**
         * The custom audience for the access token.
         */
        @Json(name = "access_token_custom_audience")
        val accessTokenCustomAudience: String? = null,
        /**
         * The content of the access token custom claims template. The template must be a valid JSON object.
         */
        @Json(name = "access_token_template_content")
        val accessTokenTemplateContent: String? = null,
        /**
         * Array of redirect URI values for use in OIDC Logout flows.
         */
        @Json(name = "post_logout_redirect_urls")
        val postLogoutRedirectURLS: List<String>? = emptyList(),
        /**
         * The logo URL of the Connected App, if any.
         */
        @Json(name = "logo_url")
        val logoURL: String? = null,
        /**
         * Valid for first party clients only. If true, the client does not need to request explicit user consent for the
         * `offline_access` scope.
         */
        @Json(name = "bypass_consent_for_offline_access")
        val bypassConsentForOfflineAccess: Boolean? = null,
    )

/**
* Response type for `Clients.update`.
*/
@JsonClass(generateAdapter = true)
public data class UpdateResponse
    @JvmOverloads
    constructor(
        /**
         * Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we
         * may ask for this value to help identify a specific API call when helping you debug an issue.
         */
        @Json(name = "request_id")
        val requestId: String,
        /**
         * The Connected App affected by this operation.
         */
        @Json(name = "connected_app")
        val connectedApp: ConnectedApp,
        /**
         * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values
         * equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
         */
        @Json(name = "status_code")
        val statusCode: Int,
    )
