package com.stytch.java.consumer.api.debug

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.stytch.java.common.InstantAdapter
import com.stytch.java.common.StytchResult
import com.stytch.java.consumer.models.debug.WhoamiRequest
import com.stytch.java.consumer.models.debug.WhoamiResponse
import com.stytch.java.http.HttpClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import kotlinx.coroutines.future.asCompletableFuture
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.util.concurrent.CompletableFuture

public interface Debug {
    public suspend fun whoami(data: WhoamiRequest): StytchResult<WhoamiResponse>

    public fun whoami(
        data: WhoamiRequest,
        callback: (StytchResult<WhoamiResponse>) -> Unit,
    )

    public fun whoamiCompletable(data: WhoamiRequest): CompletableFuture<StytchResult<WhoamiResponse>>
}

internal class DebugImpl(
    private val httpClient: HttpClient,
    private val coroutineScope: CoroutineScope,
) : Debug {
    private val moshi = Moshi.Builder().add(InstantAdapter()).build()

    override suspend fun whoami(data: WhoamiRequest): StytchResult<WhoamiResponse> =
        withContext(Dispatchers.IO) {
            var headers = emptyMap<String, String>()

            val asJson = moshi.adapter(WhoamiRequest::class.java).toJson(data)
            val type = Types.newParameterizedType(Map::class.java, String::class.java, Any::class.java)
            val adapter: JsonAdapter<Map<String, Any>> = moshi.adapter(type)
            val asMap = adapter.fromJson(asJson) ?: emptyMap()
            httpClient.get("/v1/debug/whoami", asMap, headers)
        }

    override fun whoami(
        data: WhoamiRequest,
        callback: (StytchResult<WhoamiResponse>) -> Unit,
    ) {
        coroutineScope.launch {
            callback(whoami(data))
        }
    }

    override fun whoamiCompletable(data: WhoamiRequest): CompletableFuture<StytchResult<WhoamiResponse>> =
        coroutineScope.async {
            whoami(data)
        }.asCompletableFuture()
}
