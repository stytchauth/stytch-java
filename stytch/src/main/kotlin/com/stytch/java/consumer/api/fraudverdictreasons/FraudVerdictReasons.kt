package com.stytch.java.consumer.api.fraudverdictreasons

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Moshi
import com.stytch.java.common.InstantAdapter
import com.stytch.java.common.StytchResult
import com.stytch.java.consumer.models.fraudverdictreasons.ListRequest
import com.stytch.java.consumer.models.fraudverdictreasons.ListResponse
import com.stytch.java.consumer.models.fraudverdictreasons.OverrideRequest
import com.stytch.java.consumer.models.fraudverdictreasons.OverrideResponse
import com.stytch.java.http.HttpClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import kotlinx.coroutines.future.asCompletableFuture
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.util.concurrent.CompletableFuture

public interface VerdictReasons {
    /**
     * Use this endpoint to override the action returned for a specific verdict reason during a fingerprint lookup. For
     * example, Stytch Device Fingerprinting returns a `CHALLENGE` verdict action by default for the verdict reason
     * `VIRTUAL_MACHINE`. You can use this endpoint to override that reason to return an `ALLOW` verdict instead if you expect
     * many legitimate users to be using a browser that runs in a virtual machine.
     */
    public suspend fun override(data: OverrideRequest): StytchResult<OverrideResponse>

    /**
     * Use this endpoint to override the action returned for a specific verdict reason during a fingerprint lookup. For
     * example, Stytch Device Fingerprinting returns a `CHALLENGE` verdict action by default for the verdict reason
     * `VIRTUAL_MACHINE`. You can use this endpoint to override that reason to return an `ALLOW` verdict instead if you expect
     * many legitimate users to be using a browser that runs in a virtual machine.
     */
    public fun override(
        data: OverrideRequest,
        callback: (StytchResult<OverrideResponse>) -> Unit,
    )

    /**
     * Use this endpoint to override the action returned for a specific verdict reason during a fingerprint lookup. For
     * example, Stytch Device Fingerprinting returns a `CHALLENGE` verdict action by default for the verdict reason
     * `VIRTUAL_MACHINE`. You can use this endpoint to override that reason to return an `ALLOW` verdict instead if you expect
     * many legitimate users to be using a browser that runs in a virtual machine.
     */
    public fun overrideCompletable(data: OverrideRequest): CompletableFuture<StytchResult<OverrideResponse>>

    /**
     * Get the list of verdict reasons returned by the Stytch Device Fingerprinting product along with their default actions
     * and any overrides you may have defined. This is not an exhaustive list of verdict reasons, but it contains all verdict
     * reasons that you may set an override on.
     *
     * For a full list of possible verdict reasons, see
     * [Warning Flags (Verdict Reasons)](https://stytch.com/docs/docs/fraud/guides/device-fingerprinting/reference/warning-flags-verdict-reasons).
     */
    public suspend fun list(data: ListRequest): StytchResult<ListResponse>

    /**
     * Get the list of verdict reasons returned by the Stytch Device Fingerprinting product along with their default actions
     * and any overrides you may have defined. This is not an exhaustive list of verdict reasons, but it contains all verdict
     * reasons that you may set an override on.
     *
     * For a full list of possible verdict reasons, see
     * [Warning Flags (Verdict Reasons)](https://stytch.com/docs/docs/fraud/guides/device-fingerprinting/reference/warning-flags-verdict-reasons).
     */
    public fun list(
        data: ListRequest,
        callback: (StytchResult<ListResponse>) -> Unit,
    )

    /**
     * Get the list of verdict reasons returned by the Stytch Device Fingerprinting product along with their default actions
     * and any overrides you may have defined. This is not an exhaustive list of verdict reasons, but it contains all verdict
     * reasons that you may set an override on.
     *
     * For a full list of possible verdict reasons, see
     * [Warning Flags (Verdict Reasons)](https://stytch.com/docs/docs/fraud/guides/device-fingerprinting/reference/warning-flags-verdict-reasons).
     */
    public fun listCompletable(data: ListRequest): CompletableFuture<StytchResult<ListResponse>>
}

internal class VerdictReasonsImpl(
    private val httpClient: HttpClient,
    private val coroutineScope: CoroutineScope,
) : VerdictReasons {
    private val moshi = Moshi.Builder().add(InstantAdapter()).build()

    override suspend fun override(data: OverrideRequest): StytchResult<OverrideResponse> =
        withContext(Dispatchers.IO) {
            var headers = emptyMap<String, String>()

            val asJson = moshi.adapter(OverrideRequest::class.java).toJson(data)
            httpClient.post("/v1/verdict_reasons/override", asJson, headers)
        }

    override fun override(
        data: OverrideRequest,
        callback: (StytchResult<OverrideResponse>) -> Unit,
    ) {
        coroutineScope.launch {
            callback(override(data))
        }
    }

    override fun overrideCompletable(data: OverrideRequest): CompletableFuture<StytchResult<OverrideResponse>> =
        coroutineScope.async {
            override(data)
        }.asCompletableFuture()

    override suspend fun list(data: ListRequest): StytchResult<ListResponse> =
        withContext(Dispatchers.IO) {
            var headers = emptyMap<String, String>()

            val asJson = moshi.adapter(ListRequest::class.java).toJson(data)
            httpClient.post("/v1/verdict_reasons/list", asJson, headers)
        }

    override fun list(
        data: ListRequest,
        callback: (StytchResult<ListResponse>) -> Unit,
    ) {
        coroutineScope.launch {
            callback(list(data))
        }
    }

    override fun listCompletable(data: ListRequest): CompletableFuture<StytchResult<ListResponse>> =
        coroutineScope.async {
            list(data)
        }.asCompletableFuture()
}
