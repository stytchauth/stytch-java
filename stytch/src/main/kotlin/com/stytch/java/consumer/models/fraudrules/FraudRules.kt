package com.stytch.java.consumer.models.fraudrules

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass
import com.stytch.java.consumer.models.fraud.RuleAction
import java.time.Instant

/**
* Request type for `Rules.set`.
*/
@JsonClass(generateAdapter = true)
public data class SetRequest
    @JvmOverloads
    constructor(
        /**
         * The action that should be returned by a fingerprint lookup for that fingerprint or ID with a `RULE_MATCH` reason. The
         * following values are valid: `ALLOW`, `BLOCK`, `CHALLENGE`, or `NONE`. If a `NONE` action is specified, it will clear
         * the stored rule.
         */
        @Json(name = "action")
        val action: RuleAction,
        /**
         * The visitor ID we want to set a rule for. Only one fingerprint or ID can be specified in the request.
         */
        @Json(name = "visitor_id")
        val visitorId: String? = null,
        /**
         * The browser ID we want to set a rule for. Only one fingerprint or ID can be specified in the request.
         */
        @Json(name = "browser_id")
        val browserId: String? = null,
        /**
         * The visitor fingerprint we want to set a rule for. Only one fingerprint or ID can be specified in the request.
         */
        @Json(name = "visitor_fingerprint")
        val visitorFingerprint: String? = null,
        /**
         * The browser fingerprint we want to set a rule for. Only one fingerprint or ID can be specified in the request.
         */
        @Json(name = "browser_fingerprint")
        val browserFingerprint: String? = null,
        /**
         * The hardware fingerprint we want to set a rule for. Only one fingerprint or ID can be specified in the request.
         */
        @Json(name = "hardware_fingerprint")
        val hardwareFingerprint: String? = null,
        /**
         * The network fingerprint we want to set a rule for. Only one fingerprint or ID can be specified in the request.
         */
        @Json(name = "network_fingerprint")
        val networkFingerprint: String? = null,
        /**
         * The number of minutes until this rule expires. If no `expires_in_minutes` is specified, then the rule is kept
         * permanently.
         */
        @Json(name = "expires_in_minutes")
        val expiresInMinutes: Int? = null,
        /**
         * An optional description for the rule.
         */
        @Json(name = "description")
        val description: String? = null,
    )

/**
* Response type for `Rules.set`.
*/
@JsonClass(generateAdapter = true)
public data class SetResponse
    @JvmOverloads
    constructor(
        /**
         * Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we
         * may ask for this value to help identify a specific API call when helping you debug an issue.
         */
        @Json(name = "request_id")
        val requestId: String,
        /**
         * The action that will be returned for the specified fingerprint or ID.
         */
        @Json(name = "action")
        val action: RuleAction,
        /**
         * The HTTP status code of the response. Stytch follows standard HTTP response status code patterns, e.g. 2XX values
         * equate to success, 3XX values are redirects, 4XX are client errors, and 5XX are server errors.
         */
        @Json(name = "status_code")
        val statusCode: Int,
        /**
         * The cookie stored on the user's device that uniquely identifies them.
         */
        @Json(name = "visitor_id")
        val visitorId: String? = null,
        /**
         * Combination of VisitorID and NetworkFingerprint to create a clear identifier of a browser.
         */
        @Json(name = "browser_id")
        val browserId: String? = null,
        /**
         * Cookie-less way of identifying a unique user.
         */
        @Json(name = "visitor_fingerprint")
        val visitorFingerprint: String? = null,
        /**
         * Combination of signals to identify a browser and its specific version.
         */
        @Json(name = "browser_fingerprint")
        val browserFingerprint: String? = null,
        /**
         * Combinations of signals to identify an operating system and architecture.
         */
        @Json(name = "hardware_fingerprint")
        val hardwareFingerprint: String? = null,
        /**
         * Combination of signals associated with a specific network commonly known as TLS fingerprinting.
         */
        @Json(name = "network_fingerprint")
        val networkFingerprint: String? = null,
        /**
         * The timestamp when the rule expires. Values conform to the RFC 3339 standard and are expressed in UTC, e.g.
         * `2021-12-29T12:33:09Z`.
         */
        @Json(name = "expires_at")
        val expiresAt: Instant? = null,
    )
