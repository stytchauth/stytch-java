package com.stytch.java.b2b.api.passwordsdiscoveryemail

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Moshi
import com.stytch.java.b2b.models.passwordsdiscoveryemail.ResetRequest
import com.stytch.java.b2b.models.passwordsdiscoveryemail.ResetResponse
import com.stytch.java.b2b.models.passwordsdiscoveryemail.ResetStartRequest
import com.stytch.java.b2b.models.passwordsdiscoveryemail.ResetStartResponse
import com.stytch.java.common.InstantAdapter
import com.stytch.java.common.StytchResult
import com.stytch.java.http.HttpClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import kotlinx.coroutines.future.asCompletableFuture
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.util.concurrent.CompletableFuture

public interface Email {
    public suspend fun resetStart(data: ResetStartRequest): StytchResult<ResetStartResponse>

    public fun resetStart(
        data: ResetStartRequest,
        callback: (StytchResult<ResetStartResponse>) -> Unit,
    )

    public fun resetStartCompletable(data: ResetStartRequest): CompletableFuture<StytchResult<ResetStartResponse>>

    public suspend fun reset(data: ResetRequest): StytchResult<ResetResponse>

    public fun reset(
        data: ResetRequest,
        callback: (StytchResult<ResetResponse>) -> Unit,
    )

    public fun resetCompletable(data: ResetRequest): CompletableFuture<StytchResult<ResetResponse>>
}

internal class EmailImpl(
    private val httpClient: HttpClient,
    private val coroutineScope: CoroutineScope,
) : Email {
    private val moshi = Moshi.Builder().add(InstantAdapter()).build()

    override suspend fun resetStart(data: ResetStartRequest): StytchResult<ResetStartResponse> =
        withContext(Dispatchers.IO) {
            var headers = emptyMap<String, String>()

            val asJson = moshi.adapter(ResetStartRequest::class.java).toJson(data)
            httpClient.post("/v1/b2b/passwords/discovery/email/reset/start", asJson, headers)
        }

    override fun resetStart(
        data: ResetStartRequest,
        callback: (StytchResult<ResetStartResponse>) -> Unit,
    ) {
        coroutineScope.launch {
            callback(resetStart(data))
        }
    }

    override fun resetStartCompletable(data: ResetStartRequest): CompletableFuture<StytchResult<ResetStartResponse>> =
        coroutineScope.async {
            resetStart(data)
        }.asCompletableFuture()

    override suspend fun reset(data: ResetRequest): StytchResult<ResetResponse> =
        withContext(Dispatchers.IO) {
            var headers = emptyMap<String, String>()

            val asJson = moshi.adapter(ResetRequest::class.java).toJson(data)
            httpClient.post("/v1/b2b/passwords/discovery/email/reset", asJson, headers)
        }

    override fun reset(
        data: ResetRequest,
        callback: (StytchResult<ResetResponse>) -> Unit,
    ) {
        coroutineScope.launch {
            callback(reset(data))
        }
    }

    override fun resetCompletable(data: ResetRequest): CompletableFuture<StytchResult<ResetResponse>> =
        coroutineScope.async {
            reset(data)
        }.asCompletableFuture()
}
