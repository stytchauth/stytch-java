package com.stytch.java.b2b.api.passwordsdiscovery

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Moshi
import com.stytch.java.b2b.api.passwordsdiscoveryemail.Email
import com.stytch.java.b2b.api.passwordsdiscoveryemail.EmailImpl
import com.stytch.java.b2b.models.passwordsdiscovery.AuthenticateRequest
import com.stytch.java.b2b.models.passwordsdiscovery.AuthenticateResponse
import com.stytch.java.common.InstantAdapter
import com.stytch.java.common.StytchResult
import com.stytch.java.http.HttpClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import kotlinx.coroutines.future.asCompletableFuture
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.util.concurrent.CompletableFuture

public interface Discovery {
    public val email: Email

    /**
     * Authenticate an email/password combination in the discovery flow. This authenticate flow is only valid for cross-org
     * passwords use cases, and is not tied to a specific organization.
     *
     * If you have breach detection during authentication enabled in your
     * [password strength policy](https://stytch.com/docs/b2b/guides/passwords/strength-policies) and the member's credentials
     * have appeared in the HaveIBeenPwned dataset, this endpoint will return a `member_reset_password` error even if the
     * member enters a correct password. We force a password reset in this case to ensure that the member is the legitimate
     * owner of the email address and not a malicious actor abusing the compromised credentials.
     *
     * If successful, this endpoint will create a new intermediate session and return a list of discovered organizations that
     * can be session exchanged into.
     */
    public suspend fun authenticate(data: AuthenticateRequest): StytchResult<AuthenticateResponse>

    /**
     * Authenticate an email/password combination in the discovery flow. This authenticate flow is only valid for cross-org
     * passwords use cases, and is not tied to a specific organization.
     *
     * If you have breach detection during authentication enabled in your
     * [password strength policy](https://stytch.com/docs/b2b/guides/passwords/strength-policies) and the member's credentials
     * have appeared in the HaveIBeenPwned dataset, this endpoint will return a `member_reset_password` error even if the
     * member enters a correct password. We force a password reset in this case to ensure that the member is the legitimate
     * owner of the email address and not a malicious actor abusing the compromised credentials.
     *
     * If successful, this endpoint will create a new intermediate session and return a list of discovered organizations that
     * can be session exchanged into.
     */
    public fun authenticate(
        data: AuthenticateRequest,
        callback: (StytchResult<AuthenticateResponse>) -> Unit,
    )

    /**
     * Authenticate an email/password combination in the discovery flow. This authenticate flow is only valid for cross-org
     * passwords use cases, and is not tied to a specific organization.
     *
     * If you have breach detection during authentication enabled in your
     * [password strength policy](https://stytch.com/docs/b2b/guides/passwords/strength-policies) and the member's credentials
     * have appeared in the HaveIBeenPwned dataset, this endpoint will return a `member_reset_password` error even if the
     * member enters a correct password. We force a password reset in this case to ensure that the member is the legitimate
     * owner of the email address and not a malicious actor abusing the compromised credentials.
     *
     * If successful, this endpoint will create a new intermediate session and return a list of discovered organizations that
     * can be session exchanged into.
     */
    public fun authenticateCompletable(data: AuthenticateRequest): CompletableFuture<StytchResult<AuthenticateResponse>>
}

internal class DiscoveryImpl(
    private val httpClient: HttpClient,
    private val coroutineScope: CoroutineScope,
) : Discovery {
    private val moshi = Moshi.Builder().add(InstantAdapter()).build()

    override val email: Email = EmailImpl(httpClient, coroutineScope)

    override suspend fun authenticate(data: AuthenticateRequest): StytchResult<AuthenticateResponse> =
        withContext(Dispatchers.IO) {
            var headers = emptyMap<String, String>()

            val asJson = moshi.adapter(AuthenticateRequest::class.java).toJson(data)
            httpClient.post("/v1/b2b/passwords/discovery/authenticate", asJson, headers)
        }

    override fun authenticate(
        data: AuthenticateRequest,
        callback: (StytchResult<AuthenticateResponse>) -> Unit,
    ) {
        coroutineScope.launch {
            callback(authenticate(data))
        }
    }

    override fun authenticateCompletable(data: AuthenticateRequest): CompletableFuture<StytchResult<AuthenticateResponse>> =
        coroutineScope.async {
            authenticate(data)
        }.asCompletableFuture()
}
