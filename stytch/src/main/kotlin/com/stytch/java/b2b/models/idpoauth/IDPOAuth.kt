package com.stytch.java.b2b.models.idpoauth

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass
import com.stytch.java.b2b.models.idp.ScopeResult
import com.stytch.java.b2b.models.organizations.Member
import com.stytch.java.b2b.models.organizations.Organization
import com.stytch.java.consumer.models.connectedapps.ConnectedAppPublic

/**
* Request type for `OAuth.authorize`.
*/
@JsonClass(generateAdapter = true)
public data class AuthorizeRequest
    @JvmOverloads
    constructor(
        /**
         * Indicates whether the user granted the requested scopes.
         */
        @Json(name = "consent_granted")
        val consentGranted: Boolean,
        /**
         * An array of scopes requested by the client.
         */
        @Json(name = "scopes")
        val scopes: List<String>,
        /**
         * The ID of the Connected App client.
         */
        @Json(name = "client_id")
        val clientId: String,
        /**
         * The callback URI used to redirect the user after authentication. This is the same URI provided at the start of the
         * OAuth flow.  This field is required when using the `authorization_code` grant.
         */
        @Json(name = "redirect_uri")
        val redirectUri: String,
        /**
         * The OAuth 2.0 response type. For authorization code flows this value is `code`.
         */
        @Json(name = "response_type")
        val responseType: String,
        /**
         * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to perform operations
         * on an Organization, so be sure to preserve this value. You may also use the organization_slug or
         * organization_external_id here as a convenience.
         */
        @Json(name = "organization_id")
        val organizationId: String? = null,
        /**
         * Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform operations on a Member,
         * so be sure to preserve this value. You may use an external_id here if one is set for the member.
         */
        @Json(name = "member_id")
        val memberId: String? = null,
        /**
         * A secret token for a given Stytch Session.
         */
        @Json(name = "session_token")
        val sessionToken: String? = null,
        /**
         * The JSON Web Token (JWT) for a given Stytch Session.
         */
        @Json(name = "session_jwt")
        val sessionJwt: String? = null,
        /**
         * Space separated list that specifies how the Authorization Server should prompt the user for reauthentication and
         * consent. Only `consent` is supported today.
         */
        @Json(name = "prompt")
        val prompt: String? = null,
        /**
         * An opaque value used to maintain state between the request and callback.
         */
        @Json(name = "state")
        val state: String? = null,
        /**
         * A string used to associate a client session with an ID token to mitigate replay attacks.
         */
        @Json(name = "nonce")
        val nonce: String? = null,
        /**
         * A base64url encoded challenge derived from the code verifier for PKCE flows.
         */
        @Json(name = "code_challenge")
        val codeChallenge: String? = null,
    )

/**
* Response type for `OAuth.authorize`.
*/
@JsonClass(generateAdapter = true)
public data class AuthorizeResponse
    @JvmOverloads
    constructor(
        /**
         * Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we
         * may ask for this value to help identify a specific API call when helping you debug an issue.
         */
        @Json(name = "request_id")
        val requestId: String,
        /**
         * The callback URI used to redirect the user after authentication. This is the same URI provided at the start of the
         * OAuth flow.  This field is required when using the `authorization_code` grant.
         */
        @Json(name = "redirect_uri")
        val redirectUri: String,
        @Json(name = "status_code")
        val statusCode: Int,
        /**
         * A one-time use code that can be exchanged for tokens.
         */
        @Json(name = "authorization_code")
        val authorizationCode: String? = null,
    )

/**
* Request type for `OAuth.authorizeStart`.
*/
@JsonClass(generateAdapter = true)
public data class AuthorizeStartRequest
    @JvmOverloads
    constructor(
        /**
         * The ID of the Connected App client.
         */
        @Json(name = "client_id")
        val clientId: String,
        /**
         * The callback URI used to redirect the user after authentication. This is the same URI provided at the start of the
         * OAuth flow.  This field is required when using the `authorization_code` grant.
         */
        @Json(name = "redirect_uri")
        val redirectUri: String,
        /**
         * The OAuth 2.0 response type. For authorization code flows this value is `code`.
         */
        @Json(name = "response_type")
        val responseType: String,
        /**
         * An array of scopes requested by the client.
         */
        @Json(name = "scopes")
        val scopes: List<String>,
        /**
         * Globally unique UUID that identifies a specific Organization. The `organization_id` is critical to perform operations
         * on an Organization, so be sure to preserve this value. You may also use the organization_slug or
         * organization_external_id here as a convenience.
         */
        @Json(name = "organization_id")
        val organizationId: String? = null,
        /**
         * Globally unique UUID that identifies a specific Member. The `member_id` is critical to perform operations on a Member,
         * so be sure to preserve this value. You may use an external_id here if one is set for the member.
         */
        @Json(name = "member_id")
        val memberId: String? = null,
        /**
         * A secret token for a given Stytch Session.
         */
        @Json(name = "session_token")
        val sessionToken: String? = null,
        /**
         * The JSON Web Token (JWT) for a given Stytch Session.
         */
        @Json(name = "session_jwt")
        val sessionJwt: String? = null,
        /**
         * Space separated list that specifies how the Authorization Server should prompt the user for reauthentication and
         * consent. Only `consent` is supported today.
         */
        @Json(name = "prompt")
        val prompt: String? = null,
    )

/**
* Response type for `OAuth.authorizeStart`.
*/
@JsonClass(generateAdapter = true)
public data class AuthorizeStartResponse
    @JvmOverloads
    constructor(
        /**
         * Globally unique UUID that is returned with every API call. This value is important to log for debugging purposes; we
         * may ask for this value to help identify a specific API call when helping you debug an issue.
         */
        @Json(name = "request_id")
        val requestId: String,
        /**
         * Globally unique UUID that identifies a specific Member.
         */
        @Json(name = "member_id")
        val memberId: String,
        /**
         * The [Member object](https://stytch.com/docs/b2b/api/member-object)
         */
        @Json(name = "member")
        val member: Member,
        /**
         * The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
         */
        @Json(name = "organization")
        val organization: Organization,
        @Json(name = "client")
        val client: ConnectedAppPublic,
        /**
         * Whether the user must provide explicit consent for the authorization request.
         */
        @Json(name = "consent_required")
        val consentRequired: Boolean,
        /**
         * Details about each requested scope.
         */
        @Json(name = "scope_results")
        val scopeResults: List<ScopeResult>,
        @Json(name = "status_code")
        val statusCode: Int,
    )
