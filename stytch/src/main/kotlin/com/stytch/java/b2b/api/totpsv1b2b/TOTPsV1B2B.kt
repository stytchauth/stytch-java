package com.stytch.java.b2b.api.totpsv1b2b

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Moshi
import com.stytch.java.b2b.api.totpsv1b2btotps.TOTPs
import com.stytch.java.b2b.api.totpsv1b2btotps.TOTPsImpl
import com.stytch.java.b2b.models.totpsv1b2b.CreateRequest
import com.stytch.java.b2b.models.totpsv1b2b.CreateResponse
import com.stytch.java.common.InstantAdapter
import com.stytch.java.common.StytchResult
import com.stytch.java.http.HttpClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import kotlinx.coroutines.future.asCompletableFuture
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.util.concurrent.CompletableFuture

public interface B2B {
    public val totps: TOTPs

    public suspend fun create(data: CreateRequest): StytchResult<CreateResponse>

    public fun create(
        data: CreateRequest,
        callback: (StytchResult<CreateResponse>) -> Unit,
    )

    public fun createCompletable(data: CreateRequest): CompletableFuture<StytchResult<CreateResponse>>
}

internal class B2BImpl(private val httpClient: HttpClient, private val coroutineScope: CoroutineScope) : B2B {
    private val moshi = Moshi.Builder().add(InstantAdapter()).build()

    override val totps: TOTPs = TOTPsImpl(httpClient, coroutineScope)

    override suspend fun create(data: CreateRequest): StytchResult<CreateResponse> =
        withContext(Dispatchers.IO) {
            var headers = emptyMap<String, String>()

            val asJson = moshi.adapter(CreateRequest::class.java).toJson(data)
            httpClient.post("/v1/b2b/totp", asJson, headers)
        }

    override fun create(
        data: CreateRequest,
        callback: (StytchResult<CreateResponse>) -> Unit,
    ) {
        coroutineScope.launch {
            callback(create(data))
        }
    }

    override fun createCompletable(data: CreateRequest): CompletableFuture<StytchResult<CreateResponse>> =
        coroutineScope.async {
            create(data)
        }.asCompletableFuture()
}
