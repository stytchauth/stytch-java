package com.stytch.java.b2b.api.discoveryintermediatesessions

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Moshi
import com.stytch.java.b2b.models.discoveryintermediatesessions.ExchangeRequest
import com.stytch.java.b2b.models.discoveryintermediatesessions.ExchangeResponse
import com.stytch.java.common.InstantAdapter
import com.stytch.java.common.StytchResult
import com.stytch.java.http.HttpClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import kotlinx.coroutines.future.asCompletableFuture
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.util.concurrent.CompletableFuture

public interface IntermediateSessions {
    /**
     * Exchange an Intermediate Session for a fully realized [Member Session](https://stytch.com/docs/b2b/api/session-object)
     * for the [Organization](https://stytch.com/docs/b2b/api/organization-object) that the user wishes to log into.
     *
     * This endpoint can be used to accept invites and into a new Organization on the basis of the user's email domain or
     * OAuth tenant.
     *
     * If the user **has** already satisfied the authentication requirements of the Organization they are trying to exchange
     * into and logged in with a method that verifies their email address, this API will return `member_authenticated: true`
     * and a `session_token` and `session_jwt`.
     *
     * If the user **has not** satisfied the primary or secondary authentication requirements of the Organization they are
     * attempting to exchange into or is JIT Provisioning but did not log in via a method that provides email verification,
     * this API will return `member_authenticated: false` and an `intermediate_session_token`.
     *
     * If `primary_required` is returned, prompt the user to fulfill the Organization's auth requirements using the options
     * returned in `primary_required.allowed_auth_methods`.
     *
     * If `primary_required` is null and `mfa_required` is set, check `mfa_required.member_options` to determine if the Member
     * has SMS OTP or TOTP set up for MFA and prompt accordingly. If the Member has SMS OTP, check
     * `mfa_required.secondary_auth_initiated` to see if the OTP has already been sent.
     *
     * Include the `intermediate_session_token` returned above when calling the `authenticate()` method that the user needed
     * to perform. Once the user has completed the authentication requirements they were missing, they will be granted a full
     * `session_token` and `session_jwt` to indicate they have successfully logged into the Organization.
     *
     * The `intermediate_session_token` can also be used with the
     * [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to
     * create a new Organization instead of joining an existing one.
     */
    public suspend fun exchange(data: ExchangeRequest): StytchResult<ExchangeResponse>

    /**
     * Exchange an Intermediate Session for a fully realized [Member Session](https://stytch.com/docs/b2b/api/session-object)
     * for the [Organization](https://stytch.com/docs/b2b/api/organization-object) that the user wishes to log into.
     *
     * This endpoint can be used to accept invites and into a new Organization on the basis of the user's email domain or
     * OAuth tenant.
     *
     * If the user **has** already satisfied the authentication requirements of the Organization they are trying to exchange
     * into and logged in with a method that verifies their email address, this API will return `member_authenticated: true`
     * and a `session_token` and `session_jwt`.
     *
     * If the user **has not** satisfied the primary or secondary authentication requirements of the Organization they are
     * attempting to exchange into or is JIT Provisioning but did not log in via a method that provides email verification,
     * this API will return `member_authenticated: false` and an `intermediate_session_token`.
     *
     * If `primary_required` is returned, prompt the user to fulfill the Organization's auth requirements using the options
     * returned in `primary_required.allowed_auth_methods`.
     *
     * If `primary_required` is null and `mfa_required` is set, check `mfa_required.member_options` to determine if the Member
     * has SMS OTP or TOTP set up for MFA and prompt accordingly. If the Member has SMS OTP, check
     * `mfa_required.secondary_auth_initiated` to see if the OTP has already been sent.
     *
     * Include the `intermediate_session_token` returned above when calling the `authenticate()` method that the user needed
     * to perform. Once the user has completed the authentication requirements they were missing, they will be granted a full
     * `session_token` and `session_jwt` to indicate they have successfully logged into the Organization.
     *
     * The `intermediate_session_token` can also be used with the
     * [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to
     * create a new Organization instead of joining an existing one.
     */
    public fun exchange(
        data: ExchangeRequest,
        callback: (StytchResult<ExchangeResponse>) -> Unit,
    )

    /**
     * Exchange an Intermediate Session for a fully realized [Member Session](https://stytch.com/docs/b2b/api/session-object)
     * for the [Organization](https://stytch.com/docs/b2b/api/organization-object) that the user wishes to log into.
     *
     * This endpoint can be used to accept invites and into a new Organization on the basis of the user's email domain or
     * OAuth tenant.
     *
     * If the user **has** already satisfied the authentication requirements of the Organization they are trying to exchange
     * into and logged in with a method that verifies their email address, this API will return `member_authenticated: true`
     * and a `session_token` and `session_jwt`.
     *
     * If the user **has not** satisfied the primary or secondary authentication requirements of the Organization they are
     * attempting to exchange into or is JIT Provisioning but did not log in via a method that provides email verification,
     * this API will return `member_authenticated: false` and an `intermediate_session_token`.
     *
     * If `primary_required` is returned, prompt the user to fulfill the Organization's auth requirements using the options
     * returned in `primary_required.allowed_auth_methods`.
     *
     * If `primary_required` is null and `mfa_required` is set, check `mfa_required.member_options` to determine if the Member
     * has SMS OTP or TOTP set up for MFA and prompt accordingly. If the Member has SMS OTP, check
     * `mfa_required.secondary_auth_initiated` to see if the OTP has already been sent.
     *
     * Include the `intermediate_session_token` returned above when calling the `authenticate()` method that the user needed
     * to perform. Once the user has completed the authentication requirements they were missing, they will be granted a full
     * `session_token` and `session_jwt` to indicate they have successfully logged into the Organization.
     *
     * The `intermediate_session_token` can also be used with the
     * [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to
     * create a new Organization instead of joining an existing one.
     */
    public fun exchangeCompletable(data: ExchangeRequest): CompletableFuture<StytchResult<ExchangeResponse>>
}

internal class IntermediateSessionsImpl(
    private val httpClient: HttpClient,
    private val coroutineScope: CoroutineScope,
) : IntermediateSessions {
    private val moshi = Moshi.Builder().add(InstantAdapter()).build()

    override suspend fun exchange(data: ExchangeRequest): StytchResult<ExchangeResponse> =
        withContext(Dispatchers.IO) {
            var headers = emptyMap<String, String>()

            val asJson = moshi.adapter(ExchangeRequest::class.java).toJson(data)
            httpClient.post("/v1/b2b/discovery/intermediate_sessions/exchange", asJson, headers)
        }

    override fun exchange(
        data: ExchangeRequest,
        callback: (StytchResult<ExchangeResponse>) -> Unit,
    ) {
        coroutineScope.launch {
            callback(exchange(data))
        }
    }

    override fun exchangeCompletable(data: ExchangeRequest): CompletableFuture<StytchResult<ExchangeResponse>> =
        coroutineScope.async {
            exchange(data)
        }.asCompletableFuture()
}
