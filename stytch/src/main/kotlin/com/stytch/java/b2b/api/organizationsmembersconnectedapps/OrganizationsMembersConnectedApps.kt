package com.stytch.java.b2b.api.organizationsmembersconnectedapps

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import com.squareup.moshi.Moshi
import com.stytch.java.b2b.models.organizationsmembersconnectedapps.RevokeRequest
import com.stytch.java.b2b.models.organizationsmembersconnectedapps.RevokeRequestOptions
import com.stytch.java.b2b.models.organizationsmembersconnectedapps.RevokeResponse
import com.stytch.java.common.InstantAdapter
import com.stytch.java.common.StytchResult
import com.stytch.java.http.HttpClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import kotlinx.coroutines.future.asCompletableFuture
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.util.concurrent.CompletableFuture

public interface ConnectedApps {
    /**
     * Revoke Connected App revokes a Connected App's access to a Member and revokes all active tokens that have been created
     * on the Member's behalf. New tokens cannot be created until the Member completes a new authorization flow with the
     * Connected App.
     */
    public suspend fun revoke(
        data: RevokeRequest,
        methodOptions: RevokeRequestOptions? = null,
    ): StytchResult<RevokeResponse>

    /**
     * Revoke Connected App revokes a Connected App's access to a Member and revokes all active tokens that have been created
     * on the Member's behalf. New tokens cannot be created until the Member completes a new authorization flow with the
     * Connected App.
     */
    public fun revoke(
        data: RevokeRequest,
        methodOptions: RevokeRequestOptions? = null,
        callback: (StytchResult<RevokeResponse>) -> Unit,
    )

    /**
     * Revoke Connected App revokes a Connected App's access to a Member and revokes all active tokens that have been created
     * on the Member's behalf. New tokens cannot be created until the Member completes a new authorization flow with the
     * Connected App.
     */
    public fun revokeCompletable(
        data: RevokeRequest,
        methodOptions: RevokeRequestOptions? = null,
    ): CompletableFuture<StytchResult<RevokeResponse>>
}

internal class ConnectedAppsImpl(
    private val httpClient: HttpClient,
    private val coroutineScope: CoroutineScope,
) : ConnectedApps {
    private val moshi = Moshi.Builder().add(InstantAdapter()).build()

    override suspend fun revoke(
        data: RevokeRequest,
        methodOptions: RevokeRequestOptions?,
    ): StytchResult<RevokeResponse> =
        withContext(Dispatchers.IO) {
            var headers = emptyMap<String, String>()
            methodOptions?.let {
                headers = methodOptions.addHeaders(headers)
            }

            val asJson = moshi.adapter(RevokeRequest::class.java).toJson(data)
            httpClient.post(
                "/v1/b2b/organizations/${data.organizationId}/members/${data.memberId}/connected_apps/${data.connectedAppId}/revoke",
                asJson,
                headers,
            )
        }

    override fun revoke(
        data: RevokeRequest,
        methodOptions: RevokeRequestOptions?,
        callback: (StytchResult<RevokeResponse>) -> Unit,
    ) {
        coroutineScope.launch {
            callback(revoke(data, methodOptions))
        }
    }

    override fun revokeCompletable(
        data: RevokeRequest,
        methodOptions: RevokeRequestOptions?,
    ): CompletableFuture<StytchResult<RevokeResponse>> =
        coroutineScope.async {
            revoke(data, methodOptions)
        }.asCompletableFuture()
}
